datasource db {
    provider = "mysql"
    url      = env("DEV_DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
}

enum EStatus {
    Pending
    Completed
}

enum Prompt {
    Food
    Health
    Toxic
}

enum PlantType {
    Good
    Bad
}

enum Plant {
    G1
    G2
    G3
    G4
    G5
    G6
    B1
    B2
    B3
    B4
    B5
    B6
}


model Users {
    userId    String    @id @default(cuid())
    fullName  String
    username     String    @unique
    password  String
    profileComplete Boolean @default(false)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    sessions Sessions[]
    userPlants UserPlants[]
    status StatusTracks?
    promptHistory PromptHistory?

}

model UserPlants {
    plantId String @id @default(cuid())
    plant Plant
    plantType PlantType
    prompt Prompt
    health Int 
    age Int
    userId String
    user Users @relation(fields: [userId], references: [userId])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model StatusTracks {
    statusId String @id @default(cuid())
    healthImproveCount Int
    foodImproveCount Int
    toxicImproveCount Int
    userId String @unique
    user Users @relation(fields: [userId], references: [userId])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model PromptHistory {
    historyId String @id @default(cuid())
    healthPrompt String
    foodPrompt String
    toxicPrompt String
    isInitial Boolean @default(true)
    lastPromptDate DateTime @default(now())
    userId String @unique
    user Users @relation(fields: [userId], references: [userId])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}

model Sessions {
  sessionId BigInt @id @default(autoincrement())
  session String @unique
  userId String
  user Users @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now()) @db.Timestamp(3)
  deletedAt DateTime?
  expiresAt DateTime @db.Timestamp(3)
}

